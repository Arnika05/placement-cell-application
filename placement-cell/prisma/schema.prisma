// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Job{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  title String
  description String?
  short_description String?
  imageUrl String?
  isPublished Boolean @default(false)
  tags String?
  savedUsers String[]
  employmentType String?
  deadline   DateTime?
  compensation String?
  type String?
  jobMode String?
  location String?
  eligibleCourses String[] @default([])
  attachments Attachment[]
  categoryId String? @db.ObjectId
  category Category? @relation(fields: [categoryId], references: [id])
  companyId String? @db.ObjectId
  company Company? @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  @@index([categoryId])
  @@index([companyId])
  @@fulltext([title])
}

model Company{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String
    name String
    description String?
    logo String?
    coverImage String?
    website String?
    email String?
    linkedIn String?
    job Job[]
    overview String?
    whyJoinUs String?
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

model Category{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  jobs Job[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Attachment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  url String
  name String?
  jobId String? @db.ObjectId
  job Job? @relation(fields: [jobId], references: [id], onDelete:  Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model UserProfile {
  userId String @id @map("_id")
  fullName String?
  email String? @unique
  contact String?
  appliedJobs AppliedJob[]
  resumes Resumes[]
  activeResumeId String?
  
  // Additional Student Details
  dateOfBirth DateTime?
  gender String? // "Male", "Female", "Other", "Prefer not to say"
  category String? // "General", "OBC", "SC", "ST", etc.
  
  scholarNumber String? @unique
  tenthPercentage Float?
  twelfthPercentage Float?
  cgpa Float?
  educationLevel String? // "UG", "PG"
  branch String?
  graduationYear Int?
  minorSpecialization String?

  placementStatus String?
  
  activeBacklogs Int? @default(0)
  totalBacklogs Int? @default(0)
  
  internships String[] @default([])
  workExperience String?
  skills String[] @default([]) // List of skills
  certifications String[] @default([]) // List of certification names
  projects String[] @default([]) // List of project titles
  
  linkedIn String?
  github String?
  portfolio String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}


type AppliedJob{
  jobId String
  appliedAt DateTime @default(now())
}

model Resumes{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url String
  userProfileId String
  userProfile UserProfile @relation(fields: [userProfileId], references: [userId], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  @@index([userProfileId], name : "idx_userProfileId")
}